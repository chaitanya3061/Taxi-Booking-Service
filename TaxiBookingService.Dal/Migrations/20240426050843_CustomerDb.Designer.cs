// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiBookingService.Dal;

#nullable disable

namespace TaxiBookingService.Dal.Migrations
{
    [DbContext(typeof(TaxiBookingServiceDbContext))]
    [Migration("20240426050843_CustomerDb")]
    partial class CustomerDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            UserId = 101
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("CustomerRating")
                        .HasColumnType("float");

                    b.Property<decimal>("Customerwallet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PenaltyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.CustomerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feedback")
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("CustomerRating");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("DriverRating")
                        .HasColumnType("float");

                    b.Property<int>("DriverStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Driverearnings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.DriverRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feedback")
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("DriverRating");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.DriverStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DriverStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Availiable"
                        },
                        new
                        {
                            Id = 2,
                            Name = "UnAvailiable"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12, 6)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalFareAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("RideId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wallet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.RejectedRide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RideId");

                    b.ToTable("RejectedRide");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("DropoffLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PickupLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("RideCancellationReasonId")
                        .HasColumnType("int");

                    b.Property<int>("RideStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StopId1")
                        .HasColumnType("int");

                    b.Property<int?>("StopId2")
                        .HasColumnType("int");

                    b.Property<int>("TaxiTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("DropoffLocationId");

                    b.HasIndex("PickupLocationId");

                    b.HasIndex("RideCancellationReasonId");

                    b.HasIndex("RideStatusId");

                    b.HasIndex("StopId1");

                    b.HasIndex("StopId2");

                    b.HasIndex("TaxiTypeId");

                    b.ToTable("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.RideCancellationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RideCancellationReason");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Customer changed mind"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Driver unavailability"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Emergency situation"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Incorrect pickup location"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Invalid payment method"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Customer didn't show up"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Driver took too long"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Change in plans"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            IsValid = true,
                            Name = "Destination changed"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            IsValid = false,
                            Name = "Weather conditions"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            IsValid = false,
                            Name = "Traffic congestion"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            IsValid = false,
                            Name = "Change in plans"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.RideStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RideStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Searching"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Started"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Status = "CustomerCancelled"
                        },
                        new
                        {
                            Id = 6,
                            Status = "DriverCancelled"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Driver"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.ScheduledRide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("ScheduledRide");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.TariffCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.ToTable("TariffCharge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CancellationFee",
                            Value = 5m
                        },
                        new
                        {
                            Id = 2,
                            Name = "PerKm",
                            Value = 3.20m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Basefare",
                            Value = 32.0m
                        },
                        new
                        {
                            Id = 4,
                            Name = "driverCommissionRate",
                            Value = 10m
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Taxi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<int>("TaxiTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("TaxiTypeId");

                    b.ToTable("Taxi");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.TaxiType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TaxiType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "2wheeler"
                        },
                        new
                        {
                            Id = 2,
                            Name = "3wheeler"
                        },
                        new
                        {
                            Id = 3,
                            Name = "4wheeler"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.TrustedContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("TrustedContacts");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            CountryCode = "+91",
                            CreatedAt = new DateTime(2024, 4, 26, 5, 8, 43, 196, DateTimeKind.Utc).AddTicks(6906),
                            Email = "chaitu@gmail.com",
                            IsDeleted = false,
                            Name = "Chaitu",
                            PasswordHash = new byte[] { 68, 34, 19, 126, 187, 83, 100, 227, 72, 199, 18, 120, 125, 172, 9, 229, 69, 181, 192, 33, 221, 130, 254, 200, 45, 0, 212, 169, 231, 97, 225, 223, 113, 35, 225, 227, 13, 137, 228, 73, 39, 109, 200, 192, 46, 34, 33, 224, 138, 162, 79, 42, 113, 51, 40, 215, 15, 156, 199, 178, 164, 237, 143, 5 },
                            PasswordSalt = new byte[] { 12, 216, 78, 231, 125, 208, 198, 5, 97, 108, 183, 68, 2, 227, 125, 68, 126, 56, 36, 233, 25, 199, 45, 118, 117, 204, 35, 87, 121, 111, 24, 192, 244, 221, 235, 163, 54, 177, 93, 137, 234, 95, 91, 167, 94, 87, 76, 233, 118, 184, 78, 86, 76, 249, 61, 6, 153, 197, 246, 158, 192, 214, 185, 206, 100, 195, 117, 170, 54, 84, 169, 28, 97, 107, 56, 94, 45, 36, 115, 104, 81, 3, 89, 20, 14, 156, 88, 248, 234, 45, 153, 114, 152, 38, 239, 136, 236, 82, 14, 224, 3, 80, 127, 51, 197, 153, 50, 32, 58, 160, 132, 82, 219, 108, 212, 189, 236, 183, 19, 173, 44, 27, 247, 87, 51, 35, 126, 160 },
                            PhoneNumber = "7093605314",
                            RoleId = 3,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.UserLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLocation");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Admin", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.User", "User")
                        .WithMany("Admins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Customer", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.CustomerRating", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Driver", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.DriverStatus", "DriverStatus")
                        .WithMany()
                        .HasForeignKey("DriverStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.DriverRating", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Payment", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.Ride", "Ride")
                        .WithOne("Payment")
                        .HasForeignKey("TaxiBookingService.Dal.Entities.Payment", "RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.RejectedRide", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Driver", "Driver")
                        .WithMany("RejectedRides")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.Ride", "Ride")
                        .WithMany("RejectedRides")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Ride", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Customer", "Customer")
                        .WithMany("Rides")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.Driver", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaxiBookingService.Dal.Entities.Location", "DropoffLocation")
                        .WithMany()
                        .HasForeignKey("DropoffLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.Location", "PickupLocation")
                        .WithMany()
                        .HasForeignKey("PickupLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.RideCancellationReason", "RideCancellationReason")
                        .WithMany()
                        .HasForeignKey("RideCancellationReasonId");

                    b.HasOne("TaxiBookingService.Dal.Entities.RideStatus", "Ridestatus")
                        .WithMany()
                        .HasForeignKey("RideStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.Location", "Stop1Location")
                        .WithMany()
                        .HasForeignKey("StopId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaxiBookingService.Dal.Entities.Location", "Stop2Location")
                        .WithMany()
                        .HasForeignKey("StopId2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaxiBookingService.Dal.Entities.TaxiType", "TaxiType")
                        .WithMany()
                        .HasForeignKey("TaxiTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("DropoffLocation");

                    b.Navigation("PickupLocation");

                    b.Navigation("RideCancellationReason");

                    b.Navigation("Ridestatus");

                    b.Navigation("Stop1Location");

                    b.Navigation("Stop2Location");

                    b.Navigation("TaxiType");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.ScheduledRide", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Taxi", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.Dal.Entities.TaxiType", "TaxiType")
                        .WithMany()
                        .HasForeignKey("TaxiTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("TaxiType");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.TrustedContacts", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Customer", "Customer")
                        .WithMany("TrustedContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.User", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.UserLocation", b =>
                {
                    b.HasOne("TaxiBookingService.Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Customer", b =>
                {
                    b.Navigation("Rides");

                    b.Navigation("TrustedContacts");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Driver", b =>
                {
                    b.Navigation("RejectedRides");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.Ride", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("RejectedRides");
                });

            modelBuilder.Entity("TaxiBookingService.Dal.Entities.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
